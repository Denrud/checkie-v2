import { UIInitializer } from "./UIinitializer.js";
import { UITools } from "./UITools.js";
import { WidgetDataSync } from "../widget/WidgetDataSync.js";
import { DataCleaner } from "../utils/DataCleaner.js";
import { CONFIG } from "../core/Config.js";

export class UIManager {
  constructor() {
    this.uiInitializer = new UIInitializer();
    this.uiTools = new UITools();
    this.widgetUISync = new WidgetDataSync();
  }

  /**
   * üîº –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –±–ª–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
   */
  addServiceBlock() {
    const lockKey = "serviceBlockAddingLock";

    if (localStorage.getItem(lockKey) === "true") {
      console.warn("‚õî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫-—Ñ–ª–∞–≥
    localStorage.setItem(lockKey, "true");

    const serviceBlocks = this.uiInitializer.getElement("serviceItem");
    const serviceMessage = this.uiInitializer.getElement("supportMessage");
    const serviceBtn = this.uiInitializer.getElement("serviceBtn");

    if (!serviceBlocks || serviceBlocks.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –±–ª–æ–∫–æ–≤.");
      localStorage.removeItem(lockKey);
      return;
    }

    const state = JSON.parse(localStorage.getItem("serviceBlockState") || "{}");
    const serviceArray = Array.isArray(serviceBlocks)
      ? Array.from(serviceBlocks)
      : [serviceBlocks];

    const hiddenBlock = serviceArray.find((block) => {
      const id = block.id;
      return state[id] && state[id].visible === false;
    });

    if (!hiddenBlock) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.");
      this.uiTools.removeClass(serviceMessage, "hide");
      this.uiTools.addClass(serviceBtn, "hide");
      localStorage.removeItem(lockKey);
      return;
    }

    const id = hiddenBlock.id;
    const currentOrder = Object.values(state).filter((s) => s.visible).length;

    this.uiTools.removeClass(hiddenBlock, "w-condition-invisible");
    hiddenBlock.style.order = currentOrder;

    state[id].visible = true;
    state[id].order = currentOrder;

    localStorage.setItem("serviceBlockState", JSON.stringify(state));

    this.widgetUISync.widgetServiceBlocks(hiddenBlock);
    this.widgetUISync.updateRepeatsUI(true);

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ ${id} —Å –ø–æ—Ä—è–¥–∫–æ–º ${currentOrder}`);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 100ms
    setTimeout(() => {
      localStorage.removeItem(lockKey);
    }, 100);
  }

  /**
   * üîÅ –û—á–∏—Å—Ç–∫–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
   */
  removeServiceBlocks() {
    const serviceBlocks = this.uiInitializer.getElement("serviceItem");

    if (!serviceBlocks || serviceBlocks.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
      return;
    }

    const serviceArray = Array.isArray(serviceBlocks)
      ? Array.from(serviceBlocks)
      : [serviceBlocks];

    const updatedState = {};

    serviceArray.forEach((block, index) => {
      const id = block.id || `service-${index + 1}`;

      if (index === 0) {
        block.style.order = 0;
        updatedState[id] = { visible: true, order: 0 };
        return;
      }

      const inputs = block.querySelectorAll("[data-name]");
      const checkbox = block.querySelector("label > .discounted");

      const filteredInputs = Array.from(inputs).filter((input) =>
        /service|price/i.test(input.dataset.name)
      );

      const cleaner = new DataCleaner({
        block: block,
        clickElement: checkbox,
      });

      cleaner.clearFields();

      filteredInputs.forEach((input) => {
        const fieldName = input.dataset.name;
        this.widgetUISync.updateWidgetFields(fieldName, "");
      });

      this.uiTools.addClass(block, "w-condition-invisible");
      block.style.order = index;

      if (
        this.widgetUISync &&
        typeof this.widgetUISync.widgetServiceBlocks === "function"
      ) {
        this.widgetUISync.widgetServiceBlocks(block, true);
      }

      updatedState[id] = { visible: false, order: index };
    });

    localStorage.setItem("serviceBlockState", JSON.stringify(updatedState));
    console.log("üßπ –ë–ª–æ–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∏ —Å–∫—Ä—ã—Ç—ã (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ):", updatedState);
    // üß© –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤ –≤–∏–¥–∂–µ—Ç–µ
    if (
      this.widgetUISync &&
      typeof this.widgetUISync.syncOrderFromStorage === "function"
    ) {
      this.widgetUISync.syncOrderFromStorage();
    }
  }

  /**
   * üîÑ –ú–æ–¥–µ–ª—å: –ø–æ–¥–ø–∏—Å–∫–∞, —Ä–∞–∑–æ–≤–∞—è, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
   */
  changeModel(elementName, elementValue, model) {
    console.log(
      `üîπ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: ${elementName} —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${elementValue}`
    );

    const targetElement = this.uiInitializer.getElement(model);
    if (!targetElement) {
      console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç "${model}" –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.`);
      return;
    }

    const elementsArray = Array.isArray(targetElement)
      ? targetElement
      : [targetElement];

    const serviceMessage = this.uiInitializer.getElement("supportMessage");
    const serviceBtn = this.uiInitializer.getElement("serviceBtn");
    

    if (elementValue === "subscription") {
      elementsArray.forEach((item) => {
        this.uiTools.removeClass(item, "w-condition-invisible");
        this.widgetUISync?.updateRepeatsUI?.(true);
      });
    }

    if (elementValue === "onetime") {
      elementsArray.forEach((item) => {
        this.uiTools.addClass(item, "w-condition-invisible");
        this.widgetUISync?.updateRepeatsUI?.(false);
      });
    }

    if (elementValue === "multipleprices") {
      elementsArray.forEach((item) => {
        this.uiTools.removeClass(item, "w-condition-invisible");
      });
    
      this.toggleOptionMenu(true);
    }
    
    if (elementValue === "singleprice") {
      elementsArray.forEach((item) => {
        this.uiTools.addClass(item, "w-condition-invisible");
        this.uiTools.addClass(serviceMessage, "hide");
        this.uiTools.removeClass(serviceBtn, "hide");
      });
    
      this.toggleOptionMenu(false);
      this.removeServiceBlocks();
    }
    
  }

  toggleOptionMenu(visible = true) {
    const rawMenus = this.uiInitializer.getElement("optionWrapper");
  
    const menus = Array.isArray(rawMenus) ? rawMenus : [rawMenus];
    const wrapperClass = CONFIG.uiElements.serviceItem;
  
    menus.forEach((menu) => {
      const parent = menu.closest(wrapperClass);
  
      if (!parent) {
        console.warn("‚ö†Ô∏è –ú–µ–Ω—é –æ–ø—Ü–∏–π –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ .service-wrapper");
        return;
      }
  
      if (visible) {
        this.uiTools.removeClass(menu, "hide");
      } else {
        this.uiTools.addClass(menu, "hide");
      }
    });
  }
  
}
