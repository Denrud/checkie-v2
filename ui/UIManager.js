import { UIInitializer } from "./UIinitializer.js";
import { UITools } from "./UITools.js";
import { WidgetDataSync } from "../widget/WidgetDataSync.js";
import { DataCleaner } from "../utils/DataCleaner.js";

export class UIManager {
  constructor() {
    this.uiInitializer = new UIInitializer(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    this.uiTools = new UITools();
    this.widgetUISync = new WidgetDataSync();
  }

  // –º–µ–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç –∏ —Ñ–æ—Ä–º—ã –ø–æ–¥–ø–∏—Å–∫–∏
  changeModel(elementName, elementValue, model) {
    console.log(
      `üîπ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: ${elementName} —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${elementValue}`
    );

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    const targetElement = this.uiInitializer.getElement(model);

    if (!targetElement) {
      console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç "${model}" –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.`);
      return;
    }

    console.log("‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç:", targetElement);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ targetElement - –Ω–µ –º–∞—Å—Å–∏–≤
    const elementsArray = Array.isArray(targetElement)
      ? targetElement
      : [targetElement];

    if (elementValue === "subscription") {
      if (elementsArray.length > 0) {
        elementsArray.forEach((item) => {
          this.uiTools.removeClass(item, "w-condition-invisible");

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ `widgetUISync` –∏ –º–µ—Ç–æ–¥ `updateRepeatsUI`
          if (
            this.widgetUISync &&
            typeof this.widgetUISync.updateRepeatsUI === "function"
          ) {
            this.widgetUISync.updateRepeatsUI(true);
          } else {
            console.warn("‚ö†Ô∏è `widgetUISync.updateRepeatsUI` –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          }
        });
      } else {
        console.warn(
          "‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã `targetElement` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è `subscription`."
        );
      }
    }

    if (elementValue === "onetime") {
      if (elementsArray.length > 0) {
        elementsArray.forEach((item) => {
          this.uiTools.addClass(item, "w-condition-invisible");
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ `widgetUISync` –∏ –º–µ—Ç–æ–¥ `updateRepeatsUI`
          if (
            this.widgetUISync &&
            typeof this.widgetUISync.updateRepeatsUI === "function"
          ) {
            this.widgetUISync.updateRepeatsUI(false);
          } else {
            console.warn("‚ö†Ô∏è `widgetUISync.updateRepeatsUI` –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          }
        });
      } else {
        console.warn("‚ö†Ô∏è `onetime`: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.");
      }
    }

    if (elementValue === "multipleprices") {
      elementsArray.forEach((item) => {
        this.uiTools.removeClass(item, "w-condition-invisible");
      });
    }

    if (elementValue === "singleprice") {
      const serviceMessage = this.uiInitializer.getElement("supportMessage");
      const serviceBtn = this.uiInitializer.getElement("serviceBtn");
      elementsArray.forEach((item) => {
        this.uiTools.addClass(item, "w-condition-invisible");
        this.uiTools.addClass(serviceMessage, "hide");
        this.uiTools.removeClass(serviceBtn, "hide");
      });
      this.removeServiceBlocks();
    }
  }

  addServiceBlock() {
    const serviceBlocks = this.uiInitializer.getElement("serviceItem");
    const serviceMessage = this.uiInitializer.getElement("supportMessage");
    const serviceBtn = this.uiInitializer.getElement("serviceBtn");

    if (!serviceBlocks || serviceBlocks.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –±–ª–æ–∫–æ–≤.");
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏
    const hiddenBlocks = Array.from(serviceBlocks).filter((item) =>
      item.classList.contains("w-condition-invisible")
    );

    if (hiddenBlocks.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –û–î–ò–ù —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
      const blockToShow = hiddenBlocks[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫
      this.uiTools.removeClass(blockToShow, "w-condition-invisible");
      this.widgetUISync.widgetServiceBlocks(blockToShow);
      this.widgetUISync.updateRepeatsUI(true);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å–Ω—ã–π –±–ª–æ–∫:`, blockToShow);
    } else {
      console.warn("‚ö†Ô∏è –í—Å–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –±–ª–æ–∫–∏ —É–∂–µ –≤–∏–¥–∏–º—ã, –Ω–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤.");
      this.uiTools.removeClass(serviceMessage, "hide");
      this.uiTools.addClass(serviceBtn, "hide");
    }
  }

  removeServiceBlocks() {
    const serviceBlocks = this.uiInitializer.getElement("serviceItem");

    if (!serviceBlocks || serviceBlocks.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
      return;
    }

    const serviceArray = Array.isArray(serviceBlocks)
      ? Array.from(serviceBlocks)
      : [serviceBlocks];

    if (serviceArray.length > 1) {
      serviceArray.slice(1).forEach((block, index) => {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        let inputs = block.querySelectorAll("[data-name]");
        let checkbox = block.querySelector("label > .discounted");

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö data-name —Å–æ–¥–µ—Ä–∂–∏—Ç "service" –∏–ª–∏ "price"
        let filteredInputs = Array.from(inputs).filter(
          (input) => /service|price/i.test(input.dataset.name) // –†–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫
        );

        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–Ω—É—Ç—Ä–∏ —É–¥–∞–ª—è–µ–º—ã—Ö –±–ª–æ–∫–æ–≤
        const cleaner = new DataCleaner({
          block: block,
          clickElement: checkbox, // –ö–ª–∏–∫ –Ω–µ –Ω—É–∂–µ–Ω
        });

        cleaner.clearFields(); // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        filteredInputs.forEach((input) => {
          const fieldName = input.dataset.name;
          this.widgetUISync.updateWidgetFields(fieldName, ""); // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫
        this.uiTools.addClass(block, "w-condition-invisible");

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–∏–¥–∂–µ—Ç–æ–º
        if (
          this.widgetUISync &&
          typeof this.widgetUISync.widgetServiceBlocks === "function"
        ) {
          this.widgetUISync.widgetServiceBlocks(block, true);
        } else {
          console.warn("‚ö†Ô∏è `widgetUISync.widgetServiceBlocks` –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
      });

      console.log(
        `‚úÖ –£–¥–∞–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –±–ª–æ–∫–∏, –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π.`
      );
    } else {
      console.warn("‚ö†Ô∏è –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å, —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å–Ω—ã–π –±–ª–æ–∫.");
    }
  }
}
