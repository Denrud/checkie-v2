import { CONFIG } from '../core/Config.js';

export class SortableDragDrop {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-n-drop –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å mirror
   * @param {HTMLElement} root - –ö–æ—Ä–µ–Ω—å –ø–æ–∏—Å–∫–∞ (document –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
   * @param {string} mirrorGroupName - –ò–º—è –≥—Ä—É–ø–ø—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä 'skills'
   */
  static async init(root = document, mirrorGroupName) {
    console.group(`[SortableDragDrop] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DnD –¥–ª—è "${mirrorGroupName}"`);

    const groupSelector = `[${CONFIG.ATTR.GROUP_BLOCK}][${CONFIG.ATTR.GROUP_REF}="${mirrorGroupName}"]`;
    const groupEls = Array.from(root.querySelectorAll(groupSelector));

    if (groupEls.length === 0) {
      console.warn(`[SortableDragDrop] ‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${groupSelector}`);
      console.groupEnd();
      return;
    }

    groupEls.forEach(group => this._enableDnDForGroup(group));
    console.groupEnd();
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç dnd-—Å–æ–±—ã—Ç–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ –≥—Ä—É–ø–ø–µ
   * @param {HTMLElement} groupEl
   */
  static _enableDnDForGroup(groupEl) {
    const items = Array.from(groupEl.querySelectorAll(`[${CONFIG.ATTR.ITEM_ID}]`));
    const input = groupEl.querySelector(`[${CONFIG.ATTR.INPUT_SYNC}]`);
    const groupName = groupEl.getAttribute(CONFIG.ATTR.GROUP_BLOCK);

    if (!input) {
      console.warn(`[SortableDragDrop] ‚ùó input[data-sync] –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ "${groupName}"`);
      return;
    }

    let dragSrc = null;

    items.forEach(item => {
      item.setAttribute('draggable', true);

      item.addEventListener('dragstart', (e) => {
        dragSrc = item;
        item.classList.add('dragging');
        e.dataTransfer.effectAllowed = 'move';
      });

      item.addEventListener('dragover', (e) => {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
        item.classList.add('over');
      });

      item.addEventListener('dragleave', () => {
        item.classList.remove('over');
      });

      item.addEventListener('drop', (e) => {
        e.preventDefault();
        item.classList.remove('over');
      
        if (dragSrc && dragSrc !== item) {
          const parent = item.parentNode;
          const children = Array.from(parent.children).filter(el => el.hasAttribute(CONFIG.ATTR.ITEM_ID));
      
          const srcIndex = children.indexOf(dragSrc);
          const targetIndex = children.indexOf(item);
      
          // üêû –û—Ç–ª–∞–¥–∫–∞: –∫—É–¥–∞ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º
          const sourceId = dragSrc.getAttribute(CONFIG.ATTR.ITEM_ID);
          const targetId = item.getAttribute(CONFIG.ATTR.ITEM_ID);
          console.log(`[DnD] –ü–µ—Ä–µ–º–µ—â–∞–µ–º "${sourceId}" ‚Üí "${targetId}"`);
      
          if (srcIndex < targetIndex) {
            parent.insertBefore(dragSrc, item.nextSibling);
          } else {
            parent.insertBefore(dragSrc, item);
          }
      
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ input
          const newOrder = Array.from(parent.querySelectorAll(`[${CONFIG.ATTR.ITEM_ID}]`))
            .map(el => el.getAttribute(CONFIG.ATTR.ITEM_ID))
            .filter(Boolean);
      
          input.value = newOrder.join(',');
          console.log(`‚ÜïÔ∏è –ü–æ—Ä—è–¥–æ–∫ –≤ –≥—Ä—É–ø–ø–µ "${groupName}" –æ–±–Ω–æ–≤–ª—ë–Ω:`, input.value);
        }
      });
      

      item.addEventListener('dragend', () => {
        item.classList.remove('dragging');
        groupEl.querySelectorAll('.over').forEach(el => el.classList.remove('over'));
      });
    });

    console.log(`‚úÖ DnD –≤–∫–ª—é—á—ë–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã "${groupName}"`);
  }
}
