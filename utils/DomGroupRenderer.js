import { CONFIG } from "../core/Config.js";

export class DomGroupRenderer {
  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç DOM-–±–ª–æ–∫–∏ –≤ –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ ID
   * @param {HTMLElement} root - –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç (–æ–±—ã—á–Ω–æ document)
   * @param {string} mirrorGroupName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (data-mirror-group)
   * @param {Map<string, string[]>} groupMap - –ö–∞—Ä—Ç–∞ –≥—Ä—É–ø–ø: groupName ‚Üí [id1, id2, ...]
   */
  static async render(root = document, mirrorGroupName, groupMap) {
    console.group(`[DomGroupRenderer] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã "${mirrorGroupName}"`);

    const mirrorSelector = `[${CONFIG.ATTR.MIRROR_CONTAINER}="${mirrorGroupName}"]`;
    const mirrorEl = root.querySelector(mirrorSelector);

    if (!mirrorEl) {
      console.warn(`[DomGroupRenderer] ‚ùå Mirror –Ω–µ –Ω–∞–π–¥–µ–Ω: ${mirrorSelector}`);
      console.groupEnd();
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –ø–æ ID
    const allMap = new Map();
    mirrorEl.querySelectorAll(`[${CONFIG.ATTR.ITEM_ID}]`).forEach((el) => {
      const id = el.getAttribute(CONFIG.ATTR.ITEM_ID);
      if (id) allMap.set(id, el.cloneNode(true));
    });

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ (main, other, disable –∏ —Ç.–ø.)
    for (const [groupName, idList] of groupMap.entries()) {
      const groupSelector = `[${CONFIG.ATTR.GROUP_BLOCK}="${groupName}"][${CONFIG.ATTR.GROUP_REF}="${mirrorGroupName}"]`;
      const groupEl = root.querySelector(groupSelector);

      if (!groupEl) {
        console.warn(`‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ "${groupName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        continue;
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º source –∏ input
      Array.from(groupEl.children).forEach((child) => {
        if (
          child.hasAttribute(CONFIG.ATTR.GROUP_SOURCE) ||
          child.hasAttribute(CONFIG.ATTR.INPUT_SYNC)
        )
          return;
        child.remove();
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–ø–∏—Å–∫—É
      for (const id of idList) {
        const item = allMap.get(id);
        if (item) groupEl.appendChild(item.cloneNode(true));
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º input[data-sync]
      const input = groupEl.querySelector(`[${CONFIG.ATTR.INPUT_SYNC}]`);
      if (input) {
        input.value = idList.join(",");
        console.log(`üíæ –û–±–Ω–æ–≤–ª—ë–Ω input [${groupName}]:`, input.value);
      }
    }

    console.log(`‚úÖ –ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã`);

    console.groupEnd();
  }
}
