import { CONFIG } from '../core/Config.js';

export class SortableListBuilder {
  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @param {HTMLElement} root - –ö–æ—Ä–µ–Ω—å –ø–æ–∏—Å–∫–∞ (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
   * @param {string} mirrorGroupName - –ò–º—è –≥—Ä—É–ø–ø—ã (–∑–Ω–∞—á–µ–Ω–∏–µ data-mirror-group)
   * @returns {Promise<Map<string, string[]>>} - –ö–∞—Ä—Ç–∞ –≥—Ä—É–ø–ø: groupName ‚Üí [id1, id2, ...]
   */
  static async build(root = document, mirrorGroupName) {
    console.group(`[SortableListBuilder] –°—Ç–∞—Ä—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã "${mirrorGroupName}"`);

    const mirrorSelector = `[${CONFIG.ATTR.MIRROR_CONTAINER}="${mirrorGroupName}"]`;
    const mirrorEl = root.querySelector(mirrorSelector);

    if (!mirrorEl) {
      console.warn(`[SortableListBuilder] ‚ùå Mirror –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${mirrorSelector}`);
      console.groupEnd();
      return new Map();
    }

    const allItems = Array.from(mirrorEl.querySelectorAll(`[${CONFIG.ATTR.ITEM_ID}]`))
      .map((el) => el.getAttribute(CONFIG.ATTR.ITEM_ID))
      .filter(Boolean);

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-id:`, allItems);

    const groupBlocks = Array.from(
      root.querySelectorAll(`[${CONFIG.ATTR.GROUP_BLOCK}][${CONFIG.ATTR.GROUP_REF}="${mirrorGroupName}"]`)
    );

    if (groupBlocks.length === 0) {
      console.warn(`[SortableListBuilder] ‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –¥–ª—è mirror "${mirrorGroupName}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    } else {
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${groupBlocks.length} –≥—Ä—É–ø–ø:`, groupBlocks.map(el => el.getAttribute(CONFIG.ATTR.GROUP_BLOCK)));
    }

    const result = new Map();

    for (const groupEl of groupBlocks) {
      const groupName = groupEl.getAttribute(CONFIG.ATTR.GROUP_BLOCK);
      const source = groupEl.querySelector(`[${CONFIG.ATTR.GROUP_SOURCE}]`);
      let list = [];

      if (source && source.textContent.trim() !== '') {
        list = source.textContent
          .split(',')
          .map((id) => id.trim())
          .filter((id) => allItems.includes(id));
        console.log(`üì• –ì—Ä—É–ø–ø–∞ "${groupName}" –∑–∞–≥—Ä—É–∑–∏–ª–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã:`, list);
      }

      result.set(groupName, list);
    }

    const mainBlock = groupBlocks.find(
      (el) => el.getAttribute(CONFIG.ATTR.GROUP_BLOCK) === 'main'
    );

    if (mainBlock && result.get('main')?.length === 0) {
      const variantAttr = mainBlock.getAttribute(CONFIG.ATTR.GROUP_VARIANT) || '3';
      const count = parseInt(variantAttr, 10) || 3;

      const usedIds = Array.from(result.values()).flat();
      const available = allItems.filter((id) => !usedIds.includes(id));

      result.set('main', available.slice(0, count));
      result.set('other', available.slice(count));

      console.log(`üü© –ì—Ä—É–ø–ø–∞ "main" —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):`, result.get('main'));
      console.log(`üü¶ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ–ø–∞–ª –≤ "other":`, result.get('other'));
    } else {
      const used = Array.from(result.values()).flat();
      const unused = allItems.filter((id) => !used.includes(id));

      if (!result.has('other')) result.set('other', []);
      result.set('other', [...result.get('other'), ...unused]);

      console.log(`üîÑ "other" –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:`, result.get('other'));
    }

    console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –≥—Ä—É–ø–ø:`, result);
    console.groupEnd();

    return result;
  }
}
