import { UIManager } from "../ui/UIManager.js";
import { UIMenuManager } from "../ui/UIMenuManager.js";
import { CONFIG } from "../core/Config.js";
import { StorageManager } from "../utils/StorageManager.js";

export class FormHandler {
  constructor(widgetSync, uiInitializer) {
    this.widgetSync = widgetSync;
    this.uiInitializer = uiInitializer;
    this.uiManager = new UIManager();
    this.UiMenuManager = new UIMenuManager();
    this.libLink = CONFIG.currencySymbols;
    this.storage = new StorageManager("customFields").getData();
  }

  async currencySymbolsChecker(value) {
    console.log(value.length);
    const { default: currencySymbols } = await import(this.libLink);
    if (value !== "" && value.length === 3) {
      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∑–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä —Å –≤–∞–ª—é—Ç–æ–π USD)
      console.log(value, currencySymbols(`${value}`));
      return currencySymbols(`${value}`);
    } else {
      return value;
    }
  }

  /**
   * üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ `input`, `select`, `textarea`
   */
  async handleInputChange(event) {
    const input = event.target;
    console.log(input.type, input.value);
    const fieldName = input.dataset.name;
    const value =
      input.type === "select-one" && input.value.length === 3
        ? await this.currencySymbolsChecker(input.value)
        : input.value;
    // if (!fieldName) return;
    console.log(fieldName, value);
    // üîÑ –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ WidgetDataSync
    this.widgetSync.updateWidgetFields(fieldName, value);
  }

  handleSelectChanged(event) {
    const select = event.target;
    const selectName = select.dataset.name;
    console.log(select, selectName);
  }
  /**
   * üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
   */
  handleImageUpload(event) {
    const inputName = event.target.name;
    const file = event.target.files[0]; // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞
    console.log(inputName, file);
    this.widgetSync.updateFileUpload(inputName, file);
    console.log("üìÇ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", file);
  }

  handleImageRemove(event) {
    const inputName = event.target.dataset.name || null;
    this.widgetSync.updateFileUpload(inputName, null);
    console.log("üìÇ –§–∞–π–ª —É–¥–∞–ª–µ–Ω");
    console.log(inputName);
  }

  handleRadioButtonChange(event) {
    const input = event.target;
    const radioName = input.dataset.name;
    const radioValue = input.value;
    if (radioValue === "subscription" || radioValue === "onetime") {
      this.uiManager.changeModel(radioName, radioValue, "repeats");
    }
    if (radioValue === "multipleprices" || radioValue === "singleprice") {
      this.uiManager.changeModel(
        radioName,
        radioValue,
        "serviceBlockController"
      );
    }
  }

  handlerSubmitted(event) {
    const formId = event.target.closest("form").id;
    const form = document.querySelector(`#${formId}`); // –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ä–º—É Webflow
    let pollingInterval; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if (form) {
      console.log("–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ñ–¥–µ–º –æ—Ç–≤–µ—Ç...");
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
      pollingInterval = setInterval(() => {
        fetch(`${CONFIG.webhooks.form}`)
          .then((response) => response.text())
          .then((data) => {
            console.log("–û—Ç–≤–µ—Ç –≤–µ–±—Ö—É–∫–∞:", data);
            if (data.includes("Accepted")) {
              // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "Accepted"
              clearInterval(pollingInterval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å
              console.log("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...");
              // location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            }
          })
          .catch((error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–µ–±—Ö—É–∫–∞:", error);
          });
      }, 3000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª 3 —Å–µ–∫—É–Ω–¥—ã
    }
  }

  handlerAddService(event) {
    this.uiManager.addServiceBlock();
  }

  /**
   * üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É [option]
   */
  handleOptionClick(event) {
    const target = event.target;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ç—Ä–∏–±—É—Ç option —É —ç–ª–µ–º–µ–Ω—Ç–∞
    const action = target.getAttribute("option");
    if (!action) return;

    // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, service-wrapper)
    const parentBlock = target.closest(CONFIG.uiElements.serviceItem);
    if (!parentBlock) {
      console.warn("‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const blockId = parentBlock.id;

    console.log("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ:", {
      action,
      blockId,
      button: target,
      block: parentBlock,
    });

    // –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    switch (action) {
      case "up":
        this.UiMenuManager.changeOrder(parentBlock, -1);
        break;
      case "down":
        this.UiMenuManager.changeOrder(parentBlock, 1);
        break;
      case "delete":
        this.UiMenuManager.removeSingleServiceBlock(parentBlock);
        break;
      default:
        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
    }
  }

  handleDiscountChange(event) {
    const inputElement = event.target;
    const inputName = inputElement.dataset.name.replace("-checkbox", "");
    const triggerElement = inputElement
      .closest("label")
      ?.querySelector(".discounted");
    const discountInput = document.querySelector(`[data-name="${inputName}"]`);
    if (!discountInput) {
      console.warn("Discount input not found");
      return;
    }

    if (inputElement.checked) {
      this.widgetSync.discountFieldsUI(
        inputName,
        inputElement.checked,
        discountInput
      );
    } else {
      discountInput.value = "";
      this.widgetSync.discountFieldsUI(
        inputName,
        inputElement.checked,
        discountInput
      );
    }
  }
}
