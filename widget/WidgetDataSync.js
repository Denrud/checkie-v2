import { UITools } from "../ui/UITools.js";
import { CONFIG } from "../core/Config.js";
import { StorageManager } from "../utils/StorageManager.js";

export class WidgetDataSync {
  constructor() {
    this.uiTools = new UITools();
    this.defaultData = CONFIG.serviceDefaultData;
    this.cache = {}; // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.localStorage = new StorageManager();
  }

  /**
   * üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  finder(fieldName) {
    console.log(fieldName);
    if (fieldName != '[widget-data-id="page-title"]') {
      if (this.cache[fieldName]) {
        this.log(`‚ö°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è ${fieldName}`);
        return this.cache[fieldName];
      }

      const iframeDoc = this.getIframeDoc();

      if (!iframeDoc) {
        this.log("‚ùå `iframeDoc` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", "error");
        return;
      }

      const widgetFields = Array.from(iframeDoc.querySelectorAll(fieldName));

      if (widgetFields.length === 0) {
        this.log(`‚ö†Ô∏è –ü–æ–ª—è —Å ${fieldName} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`, "warn");
        return;
      }

      this.cache[fieldName] = widgetFields;
      return widgetFields;
    } else {
      const doc = Array.from(document.querySelectorAll(fieldName));
      if (!doc) {
        this.log(`‚ö†Ô∏è –ü–æ–ª—è —Å ${fieldName} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`, "warn");
        return;
      }

      return doc;
    }
  }

  /**
   * üì¶ –ü–æ–ª—É—á–∞–µ—Ç `iframeDoc` –∏–∑ `iframe`
   */
  getIframeDoc() {
    const iFrame = document.querySelector("iframe");
    if (!iFrame) {
      this.log("‚ùå `iframe` –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error");
      return null;
    }
    if (!iFrame.contentDocument && !iFrame.contentWindow.document) {
      this.log("‚ö†Ô∏è `iframe` –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏.", "warn");
      return null;
    }
    return iFrame.contentDocument || iFrame.contentWindow.document;
  }

  /**
   * üé® –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—è
   */
  getDefaultFieldData(name) {
    const clearName = name.replace(/[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]/gi, "");
    const match = this.defaultData.find((item) => item.id === clearName);
    this.log(`üîç –ò—â–µ–º default data –¥–ª—è: ${clearName}`);
    this.log(this.defaultData);

    return match ? match.data : "";
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Webflow-–≤–∏–¥–∂–µ—Ç–µ
   */
  updateWidgetFields(fieldName, value) {
    console.log(fieldName, value);
    const widgetFields = this.finder(`[widget-data-id="${fieldName}"]`);

    if (!widgetFields || widgetFields.length === 0) {
      this.log(
        `‚ö†Ô∏è –ü–æ–ª—è –≤–∏–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è fieldName: ${fieldName}`,
        "warn"
      );
      return;
    }

    widgetFields.forEach((field) => {
      if (value) {
        if (!field.classList.contains("w-condition-invisible")) {
          field.textContent = value;
          this.log(`‚úÖ –í–∏–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: ${fieldName} ‚Üí ${value}`);
        }
      } else {
        const defaultData = this.getDefaultFieldData(fieldName);
        field.textContent = defaultData;
        this.log(`üÜó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è ${fieldName}`);
      }
    });
  }

  /**
   * üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  updateFileUpload(inputName, file) {
    const widgetFields = this.finder(`[widget-data-id="${inputName}"]`);

    if (!widgetFields || widgetFields.length === 0) {
      this.log(`‚ö†Ô∏è –ü–æ–ª—è —Å widget-data-id="${inputName}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`, "warn");
      return;
    }

    if (!file) {
      widgetFields.forEach((field) => {
        const img = field.querySelector("img");
        if (img) {
          img.src = "";
          this.log(`üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ ${inputName}.`);
        }
      });
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const imageUrl = e.target.result;
      widgetFields.forEach((field) => {
        const img = field.querySelector("img");
        if (img) {
          img.src = imageUrl;
          this.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ ${inputName}!`);
        }
      });
    };
    reader.readAsDataURL(file);
  }

  /**
   * üîÅ –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏
   */
  updateRepeatsUI(state) {
    const widgetFields = this.finder(`[widget-field-id]`);

    if (!widgetFields || widgetFields.length === 0) {
      this.log(`‚ö†Ô∏è –ü–æ–ª—è —Å widget-field-id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`, "warn");
      return;
    }

    widgetFields.forEach((field) => {
      if (state) {
        this.uiTools.removeClass(field, "w-condition-invisible");
      } else {
        this.uiTools.addClass(field, "w-condition-invisible");
      }
    });
  }

  /**
   * üé® –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–æ–≤ —É—Å–ª—É–≥
   */
  widgetServiceBlocks(element, hide = false) {
    if (!element || !element.id) {
      this.log("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç `id`.", "warn");
      return;
    }

    const widgetServiceBlocks = this.finder(`[data-id="${element.id}"]`);

    if (!widgetServiceBlocks || widgetServiceBlocks.length === 0) {
      this.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è id=${element.id}`, "warn");
      return;
    }

    widgetServiceBlocks.forEach((block) => {
      if (hide) {
        this.uiTools.addClass(block, "w-condition-invisible");
      } else {
        this.uiTools.removeClass(block, "w-condition-invisible");
      }
    });

    this.log(`‚úÖ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è id=${element.id}, hide=${hide}`);
  }

  /**
   * üî¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  discountFieldsUI(name, state, dicountInput) {
    const widgetFields = this.finder(`[widget-data-id="${name}"]`);
    const discountContainer = this.finder(`[data-id="${name}-container"]`)[0];

    if (!widgetFields || widgetFields.length === 0) {
      this.log(`‚ö†Ô∏è –ü–æ–ª—è —Å widget-data-id="${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`, "warn");
      return;
    }
    if (!discountContainer) {
      this.log(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.`, "warn");
      return;
    }

    if (state) {
      this.uiTools.removeClass(discountContainer, "w-condition-invisible");
    } else {
      this.uiTools.addClass(discountContainer, "w-condition-invisible");
      widgetFields.forEach((field) => (field.textContent = 0));
    }
  }

  /**
   * üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  log(message, type = "info") {
    const styles = {
      info: "color: #00aaff",
      warn: "color: #ffaa00",
      error: "color: #ff0000",
    };
    console.log(`%c${message}`, styles[type] || styles.info);
  }

  /**
   * üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –±–ª–æ–∫–æ–≤ –≤ –≤–∏–¥–∂–µ—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ serviceBlockState
   */
  /**
   * üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞ –±–ª–æ–∫–æ–≤ –∏–∑ localStorage –≤ iframe
   */
  syncOrderFromStorage() {
    const rawState = localStorage.getItem("serviceBlockState");
    if (!rawState) {
      this.log("‚ö†Ô∏è serviceBlockState –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", "warn");
      return;
    }

    let state;
    try {
      state = JSON.parse(rawState);
    } catch (e) {
      this.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ serviceBlockState", "error");
      return;
    }

    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ order –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
    const blockIds = Object.keys(state);
    blockIds.forEach((blockId, i) => {
      if (typeof state[blockId].order !== "number") {
        state[blockId].order = i;
      }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–æ —Ñ—Ä–µ–π–º–µ
    blockIds.forEach((blockId) => {
      const order = state[blockId].order;

      const widgetBlocks = this.finder(`[data-id="${blockId}"]`);
      if (!widgetBlocks || widgetBlocks.length === 0) {
        this.log(`‚ö†Ô∏è –í–∏–¥–∂–µ—Ç-–±–ª–æ–∫ ${blockId} –Ω–µ –Ω–∞–π–¥–µ–Ω`, "warn");
        return;
      }

      widgetBlocks.forEach((block) => {
        block.style.order = order;
        this.log(`üîÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ ${order} –¥–ª—è ${blockId}`);
      });
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
    localStorage.setItem("serviceBlockState", JSON.stringify(state));
  }
}
